#pragma once
#include </Engine/Public/Platform.ush>
#include "FRTClothStructures.ush"

uniform FClothSimulationParameterUB SimParams;

// common condition values for stretch and shear forces
StructuredBuffer<FTriangleCondition> ConditionBasis;

// velocities of cloth mesh
StructuredBuffer<float3> Velocities;

// positions of cloth mesh
StructuredBuffer<float3> Positions;

// local forces cache, three forces on the processed triangle
RWStructuredBuffer<float3> LocalForces; // size = (3 * num of triangles) or (size if length of indices)

void StretchForces(FTriangleCondition con, float3 wu, float3 wv, float wu_Norm, float wv_Norm) {
	float3 V0 = Velocities[con.Idx[0]];
	float3 V1 = Velocities[con.Idx[1]];
	float3 V2 = Velocities[con.Idx[2]];
	
	float a_wuNorm = con.a / wu_Norm;
	float a_wvNorm = con.a / wv_Norm;
	
	float3 wu_a_wuNorm = wu * a_wuNorm;
	float3 wv_a_wvNorm = wv * a_wvNorm;

	float3 dC0dX[3], dC1dX[3];
	
	for (int i = 0; i < 3; i ++)
	{
		dC0dX[i] = con.dwudXScalar[i] * wu_a_wuNorm;
		dC1dX[i] = con.dwvdXScalar[i] * wv_a_wvNorm;
	}

	// condition value:
	float C0 = con.a * (wu_Norm - SimParams.Rest_U);
	float C1 = con.a * (wv_Norm - SimParams.Rest_V);

	// time derivative of C:
	float dC0dt = dot(dC0dX[0], V0) + dot(dC0dX[1], V1) + dot(dC0dX[2], V2);
	float dC1dt = dot(dC1dX[0], V0) + dot(dC1dX[1], V1) + dot(dC1dX[2], V2);

	// forces
	for (int i = 0; i < 3; i ++)
	{
		// f = -dE/dx = - C dC/dx
		float3 F = - SimParams.K_Stretch * (C0 * dC0dX[i] + C1 * dC1dX[i]);

		// d = -d * dC/dt * dC/dx:
		F -= SimParams.D_Stretch * (dC0dt * dC0dX[i] + dC1dt * dC1dX[i]);

		// store forces in a temporary vector
		LocalForces[con.ID + i] += F;
	}
}

void ShearForces(FTriangleCondition con, float3 wu, float3 wv) {
	float C = con.a * dot(wu, wv);
	float3 dCdX[3];
	for (int i = 0; i < 3; i ++)
	{
		dCdX[i] = con.a * (con.dwudXScalar[i] * wv + con.dwvdXScalar[i] * wu);
	}
	
	float dCdT = dot(Velocities[con.Idx[0]], dCdX[0]) + dot(Velocities[con.Idx[1]], dCdX[1]) + dot(Velocities[con.Idx[2]], dCdX[2]);

	// forces
	for (int i = 0; i < 3; i ++)
	{
		// f = -dE/dx = - k * C * dC/dx
		// d = -d * dC/dt * dC/dx
		// store forces in a temporary vector
		LocalForces[con.ID + i] -= (SimParams.K_Shear * C + SimParams.D_Shear * dCdT) * dCdX[i];
	}
}

[numthreads(16, 1, 1)]
void UpdateForces(uint3 ThreadId : SV_DispatchThreadID)
{
	uint NumOfConditions, _;
	ConditionBasis.GetDimensions(NumOfConditions, _);
	// Z += 1
	int Index = ThreadId.x;
	if (NumOfConditions <= Index) return;
	
	FTriangleCondition Con = ConditionBasis[Index];

	float3 DX_0_1 = Positions[Con.Idx[1]] - Positions[Con.Idx[0]];
	float3 DX_0_2 = Positions[Con.Idx[2]] - Positions[Con.Idx[0]];

	// calculate wu, wv
	float3 wu = (DX_0_1 * Con.dv2 - DX_0_2 * Con.dv1) / Con.d;
	float3 wv = (DX_0_2 * Con.du1 - DX_0_1 * Con.du2) / Con.d;
	float wuNorm = length(wu);
	float wvNorm = length(wv);

	// update forces
	StretchForces(Con, wu, wv, wuNorm, wvNorm);
	ShearForces(Con, wu, wv);
}