#pragma once
#include </Engine/Public/Platform.ush>
#include "FRTClothStructures.ush"

uniform FClothSimulationParameterUB SimParams;

// velocities of cloth mesh
RWStructuredBuffer<float3> Velocities;

// positions of cloth mesh
RWStructuredBuffer<float3> Pre_Positions;
RWStructuredBuffer<float3> Positions;

// Internal forces
StructuredBuffer<float3> Forces;

// Mass of cloth mesh
StructuredBuffer<float> InvMasses;

// constraint map
StructuredBuffer<int> ConstraintMap;
StructuredBuffer<float3> ConstraintData;

[numthreads(16, 1, 1)]
void VerletIntegration(uint3 ThreadId : SV_DispatchThreadID)
{
	uint NumOfVertices, _;
	Positions.GetDimensions(NumOfVertices, _);

	int Index = ThreadId.x;
	if (NumOfVertices <= Index) return;
	
	float3 Acc = (Forces[Index] * InvMasses[Index]);
	// effective calculate constraint here
	int ConID = ConstraintMap[Index];
	float A_0 = dot(ConstraintData[ConID], Acc);
	float A_1 = dot(ConstraintData[ConID + 1], Acc);
	float A_2 = dot(ConstraintData[ConID + 2], Acc);
	Acc = float3(A_0, A_1, A_2);
	
	float3 CurrentPos = Positions[Index];
	float3 PrePos = Pre_Positions[Index];
	
	// // update position using verlet
	float3 NewPos = CurrentPos * 2.f - PrePos + (SimParams.DT * SimParams.DT ) * Acc;
	
	Velocities[Index] += Acc * SimParams.DT;
	Pre_Positions[Index] = CurrentPos;
	Positions[Index] = NewPos;
}